using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Net.Http;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Kino.Model;
using Kino.Repository.Common;
using Kino.Common;

namespace Kino.Repository
{
    public class FilmRepository : IFilmRepository
    {
        public static string connectionString = "Data Source=VREMENSKISTROJ;Initial Catalog=SmallCinema;Integrated Security=True";

        public List<FilmDTO> GetPagingSortingFiltering(FilmFiltering filtering, Paging paging, Sorting sorting)
        {
            SqlConnection conn = new SqlConnection(connectionString);

            using (conn)
            {
                
                StringBuilder sb = new StringBuilder();

                SqlCommand cmd = new SqlCommand();
                if (filtering != null)
                {

                    sb.Append("SELECT * FROM Film WHERE 1=1");

                    if (!string.IsNullOrWhiteSpace(filtering.Title)) 
                    {
                        sb.Append(" AND Title LIKE @Title");
                        cmd.Parameters.AddWithValue("@Title", filtering.Title);
                    }

                    if (!string.IsNullOrWhiteSpace(filtering.Genre))
                    {
                        sb.Append(" AND Genre LIKE @Genre");
                        cmd.Parameters.AddWithValue("@Genre", filtering.Genre);
                    }

                    if (filtering.ReleaseMin != null && filtering.ReleaseMax != null)
                    {
                        sb.Append(" AND Release >= @ReleaseMin AND Release <= @ReleaseMax");
                        cmd.Parameters.AddWithValue("@ReleaseMin", filtering.ReleaseMin);
                        cmd.Parameters.AddWithValue("@ReleaseMax", filtering.ReleaseMax);
                    }
                    else if (filtering.ReleaseMin != null)
                    {
                        sb.Append(" AND Release >= @ReleaseMin");
                        cmd.Parameters.AddWithValue("@ReleaseMin", filtering.ReleaseMin);
                    }
                    else if (filtering.ReleaseMax != null)
                    {
                        sb.Append(" AND Release <= @ReleaseMax");
                        cmd.Parameters.AddWithValue("@ReleaseMax", filtering.ReleaseMax);
                    }

                    if (filtering.MinDuration != null && filtering.MaxDuration != null)
                    {
                        sb.Append(" AND Duration >= @MinDuration AND Duration <= @MaxDuration");
                        cmd.Parameters.AddWithValue("@MinDuration", filtering.MinDuration);
                        cmd.Parameters.AddWithValue("@MaxDuration", filtering.MaxDuration);
                    }
                    else if (filtering.MinDuration != null)
                    {
                        sb.Append(" AND Duration >= @MinDuration");
                        cmd.Parameters.AddWithValue("@MinDuration", filtering.MinDuration);
                    }
                    else if (filtering.MaxDuration != null)
                    {
                        sb.Append(" AND Duration <= @MaxDuration");
                        cmd.Parameters.AddWithValue("@MaxDuration", filtering.MaxDuration);
                    }
                    ////////////////////////////////////////////////////////////////////////

                    if (sorting.OrderBy != null && sorting.SortOrder != null)
                    {
                        sb.Append($" ORDER BY {sorting.OrderBy} {sorting.SortOrder}");
                        cmd.Parameters.AddWithValue("@OrderBy", sorting.OrderBy);
                        cmd.Parameters.AddWithValue("@Direction", sorting.SortOrder);
                    }
                    else if (sorting.OrderBy != null)
                    {
                        sb.Append($" ORDER BY {sorting.OrderBy} ASC");
                        cmd.Parameters.AddWithValue("@OrderBy", sorting.OrderBy);
                    }
                    else if (sorting.SortOrder != null)
                    {
                        sb.Append($" ORDER BY Release {sorting.SortOrder}");
                        cmd.Parameters.AddWithValue("@Direction", sorting.SortOrder);
                    }

                    ////////////////////////////////////////////////////////////////////////

                    if (paging.PageNumber != null && paging.PageRows != null)
                    {
                        sb.Append(" OFFSET @Offset ROWS FETCH NEXT @PageRows ROWS ONLY;");
                        int? pOffset = (0 + paging.PageNumber) * paging.PageRows;
                        cmd.Parameters.AddWithValue("@PageNumber", paging.PageNumber);
                        cmd.Parameters.AddWithValue("@PageRows", paging.PageRows);
                        cmd.Parameters.AddWithValue("@Offset", pOffset);
                    }
                    else if (paging.PageNumber != null)
                    {
                        sb.Append(" OFFSET @Offset ROWS FETCH NEXT 5 ROWS ONLY;");
                        int? pOffset = (0 + paging.PageNumber) * 5;
                        cmd.Parameters.AddWithValue("@PageNumber", paging.PageNumber);
                        cmd.Parameters.AddWithValue("@Offset", pOffset);
                    }
                    else if (paging.PageRows != null)
                    {
                        sb.Append(" OFFSET 0 ROWS FETCH NEXT @PageRows ROWS ONLY;");
                        cmd.Parameters.AddWithValue("@PageRows", paging.PageRows);
                    }
                }
                else 
                {
                    sb.Append("SELECT * FROM Film");
                };

                ///////////////////////////////////////////////////////////////////////

                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();

                ////////////////////////////////////////////////////////////////////////////
                conn.Open();
                SqlDataReader reader = cmd.ExecuteReader();

                List<FilmDTO> filmList = new List<FilmDTO>();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        FilmDTO film = new FilmDTO();

                        film.Id = reader.GetGuid(0);
                        film.Title = reader.GetString(1);
                        film.Release = reader.GetInt32(2);
                        film.Genre = reader.GetString(3);
                        film.Duration = reader.GetInt32(4);

                        filmList.Add(film);
                    }
                    reader.Close();
                    return filmList;
                }
                else
                {
                    return (null);
                }
            }
        }


/// /////////////////////////////////////////////////////////////////////////////////////////


        public async Task<List<FilmDTO>> GetAllAsync() // vracam listu pa zato
        {
            try
            {
                SqlConnection conn = new SqlConnection(connectionString); //conn je connection

                using (conn)
                {
                    SqlCommand cmd = new SqlCommand("SELECT * FROM Film", conn);
                    conn.Open();

                    SqlDataReader reader = await cmd.ExecuteReaderAsync();
                    
                    //Kino.Model.Film film = new Kino.Model.Film(); // ne treba, vidi ga

                    List<FilmDTO> filmList = new List<FilmDTO>();
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            FilmDTO film = new FilmDTO();

                            film.Id = reader.GetGuid(0);
                            film.Title = reader.GetString(1);
                            film.Release = reader.GetInt32(2);
                            film.Genre = reader.GetString(3);
                            film.Duration = reader.GetInt32(4);

                            filmList.Add(film);
                        }
                        reader.Close();
                        return filmList;
                    }
                    else
                    {
                        return (null);
                    }
                }   // zatvorio conn, prestao using                        
            }
            catch (Exception)
            {
                return (null);
            }
        }
        
        public async Task<FilmDTO> GetByIdAsync(Guid id)
        {
            try
            {
                SqlConnection conn = new SqlConnection(connectionString);

                using (conn)
                {
                    SqlCommand cmd = new SqlCommand("SELECT * FROM Film WHERE Id = @id", conn);
                    cmd.Parameters.AddWithValue("@id", id);
                    conn.Open();

                    SqlDataReader reader = await cmd.ExecuteReaderAsync();

                    if (reader.HasRows)
                    {
                        FilmDTO film = new FilmDTO(); //stavio tu jer return film mora ici iza while a unutar if petlje, inace javlja not all paths return value

                        while (reader.Read())
                        {
                            //Film film = new Film();

                            film.Id = reader.GetGuid(0);
                            film.Title = reader.GetString(1);
                            film.Release = reader.GetInt32(2);
                            film.Genre = reader.GetString(3);
                            film.Duration = reader.GetInt32(4);
                            //return film;
                        }
                        reader.Close();
                        return film;
                    }
                    else
                    {
                        return (null);
                    }
                }   // zatvorio conn, prestao using                        
            }
            catch (Exception)
            {
                return (null);
            }
        }
        
        
        public async Task<FilmDTO> PostAsync(FilmDTO film)
        {
            try
            {
                SqlConnection conn = new SqlConnection(connectionString); //conn je connection

                using (conn)
                {
                    SqlCommand cmd = new SqlCommand("INSERT INTO Film VALUES (@id, @title, @release, @genre, @duration);", conn);

                    cmd.Parameters.AddWithValue("@id", film.Id=Guid.NewGuid());
                    cmd.Parameters.AddWithValue("@title", film.Title);
                    cmd.Parameters.AddWithValue("@release", film.Release);
                    cmd.Parameters.AddWithValue("@genre", film.Genre);
                    cmd.Parameters.AddWithValue("@duration", film.Duration);
                    conn.Open();

                    if (cmd.ExecuteNonQuery() > 0)
                    {
                        return film;
                    }
                    else
                    {
                        return (null);
                    }
                }   // zatvorio conn, prestao using                        
            }
            catch (Exception)
            {
                return (null);
            }
        }
        
        
        public async Task<FilmDTO> PutAsync(string id, FilmDTO film)
        {
            try
            {
                SqlConnection conn = new SqlConnection(connectionString); 

                using (conn)
                {
                    SqlCommand cmdS = new SqlCommand("SELECT * FROM Film WHERE Id = @id", conn);
                    cmdS.Parameters.AddWithValue("@id", id); 
                    conn.Open();

                    SqlDataReader reader = await cmdS.ExecuteReaderAsync();

                    if (reader.HasRows)
                    {
                        SqlCommand cmdU = new SqlCommand("UPDATE Film SET Title = @title, Release = @release, Genre = @genre, Duration = @duration WHERE Id = @id;", conn);

                        cmdU.Parameters.AddWithValue("@id", id);
                        cmdU.Parameters.AddWithValue("@title", film.Title); 
                        cmdU.Parameters.AddWithValue("@release", film.Release); 
                        cmdU.Parameters.AddWithValue("@genre", film.Genre); 
                        cmdU.Parameters.AddWithValue("@duration", film.Duration);

                        reader.Close();

                        if (cmdU.ExecuteNonQuery() > 0)
                        {
                            return film;
                        }
                        else
                        {
                            return (null);
                        }
                    }
                    else
                    {
                        return (null);
                    }
                }                       
            }
            catch (Exception)
            {
                return (null);
            }
        }
        
        
        public async Task<List<FilmDTO>> DeleteAsync(Guid id)
        {
            try
            {
                SqlConnection conn = new SqlConnection(connectionString);

                using (conn)
                {
                    SqlCommand cmdS = new SqlCommand("SELECT * FROM Film WHERE Id = @id", conn);
                    cmdS.Parameters.AddWithValue("@id", id);
                    conn.Open();

                    SqlDataReader reader = await cmdS.ExecuteReaderAsync();

                    if (reader.HasRows)
                    {
                        SqlCommand cmdU = new SqlCommand("DELETE FROM Film WHERE Id = @id;", conn);

                        cmdU.Parameters.AddWithValue("@id", id);
                        
                        reader.Close();

                        if (cmdU.ExecuteNonQuery() > 0)
                        {

                            List<FilmDTO> filmList = await GetAllAsync(); // jer je async mora ici await
                            // List<Film> filmList = new List<Film>();
                            //Film film = new Film();
                            
                            //while (reader.Read())
                            //{
                            //    film.Id = reader.GetGuid(0);
                            //    film.Title = reader.GetString(1);
                            //    film.Release = reader.GetInt32(2);
                            //    film.Genre = reader.GetString(3);
                            //    film.Duration = reader.GetInt32(4);

                            //    filmList.Add(film);
                            //}                           

                            //reader.Close();
                            return filmList;

                        }
                        else
                        {
                            return (null);
                        }
                    }
                    else
                    {
                        return (null);
                    }
                }
            }
            catch (Exception)
            {
                return (null);
            }
        }

    }
}

------------------------------------------------------------------------------------

using SchoolMS.Common;
using SchoolMS.Model;
using SchoolMS.Model.Common;
using SchoolMS.Repository.Common;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

namespace SchoolMS.Repository
{
    public class StudentRepository 
    {
        public static string connectionString = "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=SchoolMS;Integrated Security=True";

        public async Task<List<StudentModelDTO>> GetAllStudents(string search, int pageNumber, int pageSize)
        {
            try
            {

                SqlConnection connection = new SqlConnection(connectionString);
                using (connection)
                {   StringBuilder queryString = new StringBuilder();

                    SqlCommand commmand = new SqlCommand();
                    queryString.AppendLine("select * from Student where 1=1");           
                    //if (studentFilter != null)
                    //{
                    //    if (studentFilter.SchoolId != Guid.Empty)
                    //    {
                    //        queryString.AppendLine("and SchoolId = @schoolId ");
                    //        commmand.Parameters.AddWithValue("@schoolId", studentFilter.SchoolId);

                    //    }
                    //    if(studentFilter.Name != null)
                    //    {
                    //        queryString.AppendLine("and FirstName like '%'+@name+'%' or LastName like '%'+@name+'%' ");
                    //        commmand.Parameters.AddWithValue("@name", studentFilter.Name);
                    //    }
                    //    if(studentFilter.AverageFrom != null)
                    //    {
                    //        queryString.AppendLine("and Average >= @averageFrom ");
                    //        commmand.Parameters.AddWithValue("@averageFrom", studentFilter.AverageFrom);
                    //    }
                    //    if (studentFilter.AverageTo != null)
                    //    {
                    //        queryString.AppendLine("and Average <= @averageTo ");
                    //        commmand.Parameters.AddWithValue("@averageTo", studentFilter.AverageTo);
                    //    }
                    //    if (studentFilter.Average != null)
                    //    {
                    //        queryString.AppendLine("and Average = @average ");
                    //        commmand.Parameters.AddWithValue("@average", studentFilter.Average);
                    //    }
                    //    if(studentFilter.DOBFrom != null)
                    //    {
                    //        if(studentFilter.DOBTo != null)
                    //        {
                    //            queryString.AppendLine("and DOB between @dobFrom and @dobTo ");                               
                    //        }
                    //        queryString.AppendLine("and DOB between @dobFrom and '1-1-2999' ");
                    //        commmand.Parameters.AddWithValue("@dobFrom", studentFilter.DOBFrom);
                    //    }
                    //    if (studentFilter.DOBTo != null)
                    //    {
                    //        queryString.AppendLine("and DOB between '1-1-1900' and @dobTo ");
                    //        commmand.Parameters.AddWithValue("@dobTo", studentFilter.DOBTo);
                    //    }
                    //}
                    //if (sorting != null)
                    //{
                    //    queryString.AppendLine($"order by {sorting.OrderBy} {sorting.SortOrder} ");
                    //}
                    //if(paging != null)
                    //{
                    //    queryString.AppendLine("offset (@pageNumber - 1) * @pageSize rows fetch next @pageSize rows only" );
                    //    commmand.Parameters.AddWithValue("@pageNumber", paging.PageNumber);
                    //    commmand.Parameters.AddWithValue("@pageSize", paging.PageSize);
                    //}
                    commmand.Connection = connection;
                    commmand.CommandText = queryString.ToString();

                    connection.Open();
                    SqlDataReader reader = await commmand.ExecuteReaderAsync();

                    List<StudentModelDTO> students = new List<StudentModelDTO>();
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            StudentModelDTO student = new StudentModelDTO();
                            student.Id = reader.GetGuid(0);
                            student.FirstName = reader.GetString(1);
                            student.LastName = reader.GetString(2);
                            student.DOB = reader.GetDateTime(3);
                            student.Address = reader.GetString(4);
                            student.SchoolId = reader.GetGuid(5);
                            student.Average = reader.IsDBNull(6) ? student.Average : reader.GetDecimal(6);

                            students.Add(student);
                        }
                        reader.Close();
                        return students;
                    }
                    else
                    {
                        return null;
                    }
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        public async Task<StudentModelDTO> GetStudent(Guid id)
        {
            try
            {
                SqlConnection connection = new SqlConnection(connectionString);
                using (connection)
                {
                    SqlCommand command = new SqlCommand("select * from Student where Id=@id", connection);
                    command.Parameters.AddWithValue("@id", id);
                    connection.Open();
                    SqlDataReader reader = await command.ExecuteReaderAsync();

                    StudentModelDTO student = new StudentModelDTO();
                    if (reader.HasRows)
                    {
                        reader.Read();
                        student.Id = reader.GetGuid(0);
                        student.FirstName = reader.GetString(1);
                        student.LastName = reader.GetString(2);
                        student.DOB = reader.GetDateTime(3);
                        student.Address = reader.GetString(4);
                        student.SchoolId = reader.GetGuid(5);
                        student.Average = reader.IsDBNull(6) ? student.Average : reader.GetDecimal(6);

                        reader.Close();
                        return student;
                    }
                    else
                    {
                        return null;
                    }
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        public async Task<bool> AddNewStudent(StudentModelDTO student)
        {
            try
            {
                SqlConnection connection = new SqlConnection(connectionString);
                using (connection)
                {
                    SqlCommand command = new SqlCommand("insert into Student values(@id, @firstName, @lastName, @dob, @address, @schoolId, @average)", connection);
                    command.Parameters.AddWithValue("@id", Guid.NewGuid());
                    command.Parameters.AddWithValue("@firstName", student.FirstName);
                    command.Parameters.AddWithValue("@lastName", student.LastName);
                    command.Parameters.AddWithValue("@dob", student.DOB);
                    command.Parameters.AddWithValue("@address", student.Address);
                    command.Parameters.AddWithValue("@schoolId", student.SchoolId);
                    command.Parameters.AddWithValue("@average", (decimal?)student.Average ?? Convert.DBNull  );

                    connection.Open();
                    int numberOfAffectedRows = await command.ExecuteNonQueryAsync();
                    if (numberOfAffectedRows > 0)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        public async Task<bool> EditStudent(Guid id, StudentModelDTO student)
        {
            try
            {
                SqlConnection connection = new SqlConnection(connectionString);
                using (connection)
                {

                    SqlCommand commandEdit = new SqlCommand("update Student set FirstName=@firstName, LastName=@lastName, DOB=@dob, Address=@address, SchoolId=@schoolId, Average=@average where Id=@id", connection);
                    commandEdit.Parameters.AddWithValue("@id", id);
                    commandEdit.Parameters.AddWithValue("@firstName", student.FirstName);
                    commandEdit.Parameters.AddWithValue("lastName", student.LastName);
                    commandEdit.Parameters.AddWithValue("@dob", student.DOB);
                    commandEdit.Parameters.AddWithValue("@address", student.Address);
                    commandEdit.Parameters.AddWithValue("@schoolId", student.SchoolId);
                    commandEdit.Parameters.AddWithValue("@average", (decimal)student.Average == default ? Convert.DBNull : (decimal)student.Average );

                    connection.Open();
                    int numberOfAffectedRows = await commandEdit.ExecuteNonQueryAsync();
                    if (numberOfAffectedRows > 0)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }     
        }

        public async Task<bool> DeleteStudent(Guid id)
        {
            try
            {
                SqlConnection connection = new SqlConnection(connectionString);
                using (connection)
                {
                    SqlCommand command = new SqlCommand("delete from Student where Id=@id", connection);
                    command.Parameters.AddWithValue("@id", id);
                    connection.Open();
                    int numberOfAffectedRows = await command.ExecuteNonQueryAsync();
                    if (numberOfAffectedRows > 0)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

    }
}



------------------turpijino 

public async Task<List<ExpenseDTO>> GetAllAsync(Paging paging, Sorting sorting, Filtering filtering)
        {

            SqlConnection connection = new SqlConnection(connectionString);
            StringBuilder sb = new StringBuilder();
            List<ExpenseDTO> expenses = new List<ExpenseDTO>();

            // create list with filtering conditions
            List<string> filteringQuery = new List<string>();

            // if no parameters, create default objects
            if (paging == null) paging = new Paging();
            if (sorting == null) sorting = new Sorting();
            //if (filtering == null) filtering = new Filtering();


            //---------------------------------------------------------------------------
            // UBACI VARIJABLE KAO COMMAND PARAMETRE !!!
            //---------------------------------------------------------------------------


            if (filtering != null)
            {
                if (filtering.PersonId != default)
                {
                    //string personId = await FindIdByName("Person", "PersonId", filtering.PersonId.ToString());
                    filteringQuery.Add($"PersonId = '{filtering.PersonId}'");
                }
                if (filtering.CategoryId != default)
                {
                    //string categoryId = await FindIdByName("Category", "CategoryId", filtering.CategoryId.ToString());
                    filteringQuery.Add($"CategoryId = '{filtering.CategoryId}'");
                }

                if (filtering.DateFrom != null)
                {
                    filteringQuery.Add($"DATE >= '{filtering.DateFrom}'");
                }

                if (filtering.DateTo != null)
                {
                    filteringQuery.Add($"DATE <= '{filtering.DateTo}'");
                }

                if (filtering.CostFrom != null)
                {
                    filteringQuery.Add($"COST >= '{filtering.CostFrom}'");
                }

                if (filtering.CostTo != null)
                {
                    filteringQuery.Add($"COST <= '{filtering.CostTo}'");
                }
            };

            // set sorting order
            string sortingOrder = "ASC";
            if (sorting.SortOrderAsc == false) sortingOrder = "DESC";

            // create query string
            sb.Append("SELECT Expense.Id, ");
            sb.Append("PersonId, ");
            sb.Append("Person.Username AS 'PersonUsername', ");
            sb.Append("Person.Password AS 'PersonPassword', ");
            sb.AppendLine("Person.Email AS 'PersonEmail', ");
            sb.Append("Expense.CategoryId, ");
            sb.Append("Category.Name AS 'CategoryName', ");
            sb.Append("Expense.Name, ");
            sb.Append("Expense.Date, ");
            sb.Append("Expense.Cost, ");
            sb.Append("Expense.Description ");
            sb.AppendLine("FROM EXPENSE ");

            sb.AppendLine("INNER JOIN Person ON Expense.PersonId = Person.Id");
            sb.AppendLine("INNER JOIN Category ON Expense.CategoryId = Category.Id");

            // filtering has parameters? add to query
            if (filteringQuery.Any()) sb.AppendLine("WHERE " + string.Join(" AND ", filteringQuery.ToArray()));

            sb.AppendLine($"ORDER BY [{sorting.OrderBy}] {sortingOrder}");
            sb.AppendLine("OFFSET @offset ROWS");
            sb.AppendLine("FETCH NEXT @pagesize ROWS ONLY");
            sb.AppendLine(";");

            SqlCommand command = new SqlCommand(sb.ToString(), connection);
            command.Parameters.AddWithValue("@offset", (paging.PageNumber - 1) * paging.PageSize);
            command.Parameters.AddWithValue("@pagesize", paging.PageSize);
            using (connection)
            {
                try
                {
                    command.Connection.Open();
                    SqlDataReader reader = await command.ExecuteReaderAsync();
                    if (!reader.HasRows)
                    {
                        command.Connection.Close();
                        return null;
                    }
                    while (reader.Read())
                    {
                        expenses.Add(PopulateExpenseWithReaderData(reader));
                    }
                    reader.Close();
                    command.Connection.Close();
                    return expenses;

                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error: {ex.Message}");
                    return null;
                }
            }
        }