using Kino.Common;
using Kino.Model;
using Kino.Repository;
using Kino.Repository.Common;
using Kino.Service.Common;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Kino.Service
{
    public class FilmService : IFilmService
    {
        protected IFilmRepository Repository { get; set; }
        public FilmService(IFilmRepository repository)
        {
            Repository = repository;
        }

        public List<FilmDTO> GetPagingSortingFiltering(FilmFiltering filtering, Paging paging, Sorting sorting)
        {
            //FilmRepository repository = new FilmRepository();
            List<FilmDTO> filmList = Repository.GetPagingSortingFiltering(filtering, paging, sorting);
            return filmList;
        }


        /// ////////////////////////////////////////////////////////////////////

        public async Task<List<FilmDTO>> GetAllAsync()
        {
            //FilmRepository repository = new FilmRepository();
            List<FilmDTO> filmList = await Repository.GetAllAsync();
            return filmList;
        }
        
        public async Task<FilmDTO> GetByIdAsync(Guid id)
        {
            //FilmRepository repository = new FilmRepository();
            FilmDTO film = await Repository.GetByIdAsync(id);
            return film;
        }
        
        public async Task<FilmDTO> PostAsync(FilmDTO film)
        {
            //FilmRepository repository = new FilmRepository();
            FilmDTO filmService = await Repository.PostAsync(film);
            return filmService;
        }
        
        public async Task<FilmDTO> PutAsync(string id, FilmDTO film)
        {
            //FilmRepository repository = new FilmRepository();
            FilmDTO filmService = await Repository.PutAsync(id, film);
            return filmService;
        }
        
        public async Task<List<FilmDTO>> DeleteAsync(Guid id)
        {
            //FilmRepository repository = new FilmRepository();
            List<FilmDTO> filmService = await Repository.DeleteAsync(id);
            return filmService;
        }
    }
}


------------------------------------------------------------------------------------


using PagedList;
using SchoolMS.Common;
using SchoolMS.Model;
using SchoolMS.Repository;
using SchoolMS.Repository.Common;
using SchoolMS.Service.Common;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SchoolMS.Service
{
    public class StudentService : IStudentService
    {
        protected IStudentRepository StudentRepository { get; set; }

        public StudentService(IStudentRepository studentRepository)
        {
            StudentRepository = studentRepository;
        }

        public async Task<IPagedList<StudentModelDTO>> GetAllStudents(string sortBy, string search, int pageNumber, int pageSize)
        {
            IPagedList<StudentModelDTO> students = await StudentRepository.GetAllStudents(sortBy, search, pageNumber, pageSize);

            return students;
        }

        public async Task<StudentModelDTO> GetStudent(Guid id)
        {
            StudentModelDTO studentModel= await StudentRepository.GetStudent(id);

            return studentModel;
        }

        public async Task<bool> AddNewStudent(StudentModelDTO student)
        {
            bool isAdded = await StudentRepository.AddNewStudent(student);
            return isAdded;
        }

        public async Task<bool> EditStudent(Guid id, StudentModelDTO student)
        {
            StudentModelDTO studentCheck = await StudentRepository.GetStudent(id);
            if(studentCheck == null)
            {
                return false;
            }
            StudentModelDTO studentToEdit = new StudentModelDTO
            {
                Id = id,
                FirstName = student.FirstName == default ? studentCheck.FirstName : student.FirstName,
                LastName = student.LastName == default ? studentCheck.LastName : student.LastName,
                DOB = student.DOB == default ? studentCheck.DOB : student.DOB,
                Address = student.Address == default ? studentCheck.Address : student.Address,
                SchoolId = student.SchoolId == default ? studentCheck.SchoolId : student.SchoolId,
                Average = student.Average == default ? studentCheck.Average == null ? default : (decimal)studentCheck.Average : (decimal)student.Average
            };

            bool isEdited = await StudentRepository.EditStudent(id, studentToEdit);
            return isEdited;
        }

        public async Task<bool> DeleteStudent(Guid id)
        {
            StudentModelDTO studentCheck = await StudentRepository.GetStudent(id);
            if(studentCheck == null)
            {
                return false;
            }
            bool isDeleted = await StudentRepository.DeleteStudent(id);
            return isDeleted;
        }
    }
}
